generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
  previewFeatures = ["fullTextSearchPostgres"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
}

enum OrderEventStatus {
  PENDING
  ACCEPTED
  OUT_FOR_DELIVERY
  DELIVERED
  CANCELED
}

model User {
  id                     String   @id @default(uuid())
  name                   String
  email                  String   @unique
  password               String
  role                   Role     @default(USER)
  defaultShippingAddress String?
  defaultBillingAddress  String?
  createdAt              DateTime @default(now())
  updatedAt              DateTime @updatedAt

  addresses Address[]
  cartItems CartItem[]
  orders    Order[]

  @@map("users")
}

model Product {
  id          String   @id @default(uuid())
  name        String  
  description String?
  price       Decimal
  tags        String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt


  cartItems CartItem[]
  orders    OrderProduct[]
  @@map("products")
}

model Address {
  id        String   @id @default(uuid())
  lineOne   String
  lineTwo   String?
  city      String
  pincode   String
  country   String
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id])

  @@map("addresses")
}

model CartItem {
  id        String   @id @default(uuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  productId String
  quantity  Int
  product   Product  @relation(fields: [productId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("cart_items")
}

model Order {
  id        String   @id @default(uuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  netAmount Decimal
  status OrderEventStatus @default(PENDING)
  address   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  products OrderProduct[]
  events  OrderEvent[]

  @@map("orders")
}

model OrderProduct {
  id        String   @id @default(uuid())
  orderId   String
  order     Order    @relation(fields: [orderId], references: [id])
  productId String
  product   Product  @relation(fields: [productId], references: [id])
  quantity  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("order_products")
}

model OrderEvent {
  id        String   @id @default(uuid())
  orderId   String
  status    OrderEventStatus @default(PENDING)
  order     Order    @relation(fields: [orderId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("order_event")
}